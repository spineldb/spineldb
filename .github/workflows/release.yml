name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_release_assets:
    name: Build Release Assets
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            archive_name: spineldb-${{ github.ref_name }}-x86_64-windows
            asset_name: spineldb.exe
            archive_extension: .zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_name: spineldb-${{ github.ref_name }}-x86_64-linux
            asset_name: spineldb
            archive_extension: .tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            archive_name: spineldb-${{ github.ref_name }}-x86_64-macos
            asset_name: spineldb
            archive_extension: .tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive_name: spineldb-${{ github.ref_name }}-aarch64-macos
            asset_name: spineldb
            archive_extension: .tar.gz

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install linker for Windows cross-compilation
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'windows')
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # Set linker for Windows cross-compile from Linux
          CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32-gcc

      - name: Package the artifact
        shell: bash
        run: |
          # Determine paths and names
          staging_dir="${{ matrix.archive_name }}"
          binary_path="target/${{ matrix.target }}/release/${{ matrix.asset_name }}"
          archive_file="${{ matrix.archive_name }}${{ matrix.archive_extension }}"

          # Create staging directory
          mkdir -p "$staging_dir"

          # Copy files
          echo "Copying binary from $binary_path to $staging_dir/"
          cp "$binary_path" "$staging_dir/"
          echo "Copying LICENSE and README.md"
          cp LICENSE README.md "$staging_dir/"

          # Create archive
          echo "Creating archive: $archive_file"
          if [[ "${{ matrix.archive_extension }}" == ".zip" ]]; then
            # Use zip for Windows archives
            (cd "$staging_dir" && zip -r "../$archive_file" .)
          else
            # Use tar for Linux/macOS archives
            tar -czvf "$archive_file" "$staging_dir"
          fi

          # Generate checksum
          echo "Generating checksum for $archive_file"
          sha256sum "$archive_file" > "${archive_file}.sha256"

      - name: Upload artifact for the release job
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.target }}
          path: |
            ${{ matrix.archive_name }}${{ matrix.archive_extension }}
            ${{ matrix.archive_name }}${{ matrix.archive_extension }}.sha256

  create_release:
    name: Create GitHub Release
    needs: build_release_assets
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-assets-*
          merge-multiple: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true